#include <iostream>
#include "conio.h"

using namespace std;

void cagar (int vec[], int n);
void mostrar (int vec[], int n);
void copiarelempares(int vecA[], int nA, int vecB[], int &nB);
void cargarvecBnumrepetidos(int vecA[], int nA, int vecB[], int &nB);
int frecrepeticionelem(int vec[],int n, int elem);
bool verifsiexistelem(int vec[],int n, int elem);
void mostrarvecesrepetidos (int vec[],int n);

void main(){
	int vec[20],n, vecB[20], nB;
	cout<<"Ingrese el numero de elementos: ";
	cin>>n;
	cagar (vec,n);
	copiarelempares(vec,n,vecB,nB);
	cout<<"Los elementos primos son: "<<endl;
	mostrar (vecB,nB);
	cargarvecBnumrepetidos(vec,n,vecB,nB);
	cout<<"Los elementos repetidos son: "<<endl;
	mostrar (vecB,nB);
	void mostrarvecesrepetidos (vec,n);
	getch();
}

void cagar (int vec[], int n)
{int i;
	for (i=0;i<n;i++)
		{cout<<"Ingrese el valor del vec["<<i<<"]= ";
		cin>>vec[i];}
}

void mostrar (int vec[], int n)
{int i;
	for (i=0;i<n;i++)
	{	cout<<"vec["<<i<<"] =";
		cout<<vec[i]<<endl;
	}
}

void copiarelempares(int vecA[], int nA, int vecB[], int &nB){
	int i;
	nB=0;
	for (i=0;i<nA;i++){
		if (vecA[i]%2 !=0){
			vecB[nB] = vecA[i];
			nB++;
		}
	}
}

void cargarvecBnumrepetidos(int vecA[], int nA, int vecB[], int &nB){
	int i;
	nB=0;
	for (i=0;i<nA;i++){
		if ((frecrepeticionelem(vecA,nA, vecA[i]))>1&&(verifsiexistelem(vecB,nB,vecA[i])==false)){
			vecB[nB] = vecA[i];
			nB++;
		}
	}
}

int frecrepeticionelem(int vec[],int n, int elem){
	int i, c=0;
		for (i=0;i<n;i++){
			if (vec[i]==elem){
				c++;
			}
		}
		return (c);
}

bool verifsiexistelem(int vec[],int n, int elem){
	int i;
	bool k=false;
		for (i=0;i<n;i++){
				if (vec[i]==elem){
					k=true;
					i=n;
				}
		}
		return (k);
}

void mostrarvecesrepetidos (int vec[],int n){
	int i, j, c=0;
	for (i=0;i<n;i++){
		for (j=1;j<n;j++){
			if (vec[i]==vec[j]){
				c++
			}
		cout<<vec[i]<<" = " <<c<<endl;
